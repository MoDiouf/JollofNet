<script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
<% if (message !== null && messageType !== null) { %>
  <script>
    Toastify({
      text: "<%= message %>",
      backgroundColor: "<%= messageType === 'success' ? '#4CAF50' : '#FF6347' %>", // Success = Green, Error = Red
      duration: 3000,  
      close: true,     

    }).showToast();
  </script>
<% } %>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
$(document).ready(function () {
    $('#UpdatePassword').on('submit', function (e) {
      const password = $('input[name="newpassword"]').val();
      const minLength = 8;
      const selectedNetwork = $('select[name="network"]').val();

      
       // Récupère la valeur sélectionnée


      // Vérifie si un réseau est sélectionné
      if (!selectedNetwork) {
        e.preventDefault(); // Empêche l'envoi du formulaire
        Swal.fire({
          icon: 'error',
          title: 'Sélection requise',
          text: 'Veuillez choisir un réseau parmi les options disponibles.',
          confirmButtonText: 'OK',
        });
        return; // Sort de la fonction pour éviter de vérifier le mot de passe
      }
      
      // Vérifie si le mot de passe est valide
      if (!password || password.length < minLength) {
        e.preventDefault(); // Empêche l'envoi du formulaire
        Swal.fire({
          icon: 'error',
          title: 'Mot de passe invalide',
          text: `Le mot de passe doit contenir au moins ${minLength} caractères.`,
          confirmButtonText: 'OK',
        });
      }
    });
  });

  $(document).ready(function () {
    $('#deleteNetwork').on('submit', function (e) {
      const selectedNetwork = $('select[name="networkDelete"]').val();

      // Vérifie si un réseau est sélectionné
      if (!selectedNetwork) {
        e.preventDefault(); // Empêche l'envoi du formulaire
        Swal.fire({
          icon: 'error',
          title: 'Sélection requise',
          text: 'Veuillez choisir un réseau parmi les options disponibles.',
          confirmButtonText: 'OK',
        });
        return; 
      }
      
     
    });
  });
  

  $(document).ready(function () {
    $('#createNewNetwork').on('submit', function (e) {
      const password = $('input[name="newpassword"]').val();
      const minLength = 8;
      const selectedNetwork = $('select[name="networkDelete"]').val();

      // Vérifie si un réseau est sélectionné
      if (!selectedNetwork) {
        e.preventDefault(); // Empêche l'envoi du formulaire
        Swal.fire({
          icon: 'error',
          title: 'Sélection requise',
          text: 'Veuillez choisir un réseau parmi les options disponibles.',
          confirmButtonText: 'OK',
        });
        return; 
      }
      
     
    });
  });
  
  
</script>
<script>
  $(document).ready(function () {
    // Gestion de l'affichage conditionnel des champs
    $('#network-payment-select').on('change', function () {
      const paymentOption = $(this).val();
      if (paymentOption === 'paid') {
        $('#price-group').show();
        $('#prix').attr('required', true);
      } else {
        $('#price-group').hide();
        $('#prix').val('').removeAttr('required');
      }
    });

    $('#scannable').on('change', function () {
      if ($(this).is(':checked')) {
        $('#mac-address-group').show();
        $('.mac').attr('required', true);
      } else {
        $('#mac-address-group').hide();
        $('.mac').val('').removeAttr('required');
      }
    });

    // Afficher le champ de sécurité réseau seulement si "Privé" est sélectionné
    $('#network-visibility-select').on('change', function () {
      const visibility = $(this).val();
      if (visibility === 'private') {
        $('#network-security-select').show();
        $('#network-security-select').attr('required', true);
      } else {
        $('#network-security-select').hide();
        $('#network-security-select').removeAttr('required');
      }
    });

    // Validation lors de la soumission
    $('#createNewNetwork').on('submit', function (e) {
      const networkName = $('input[name="nomReseau"]').val();
      const networkVisibility = $('#network-visibility-select').val();
      const networkFrequency = $('#network-frequency-select').val();
      const networkSecurity = $('#network-security-select').val();
      const paymentOption = $('#network-payment-select').val();
      const price = $('#prix').val();
      const minPrice = 1000;
      const macFields = $('.mac');
      const password = $('input[name="newpasseword"]').val();
      const minLength = 8;

      // Vérifie que tous les champs obligatoires sont remplis
      if (!networkName || !networkVisibility || !networkFrequency || (networkVisibility === 'private' && !networkSecurity) || !paymentOption) {
        e.preventDefault();
        Swal.fire({
          icon: 'error',
          title: 'Champs manquants',
          text: 'Veuillez remplir tous les champs obligatoires.',
          confirmButtonText: 'OK',
        });
        return;
      }

      // Validation du prix si le réseau est payant
      if (paymentOption === 'paid' && (!price || price < minPrice)) {
        e.preventDefault();
        Swal.fire({
          icon: 'error',
          title: 'Prix invalide',
          text: `Le prix doit être supérieur ou égal à ${minPrice} FCFA.`,
          confirmButtonText: 'OK',
        });
        return;
      }

      // Validation des adresses MAC si scannable
      if ($('#scannable').is(':checked')) {
        let macValid = true;
        macFields.each(function () {
          if (!$(this).val().match(/^[0-9A-Fa-f]{2}$/)) {
            macValid = false;
          }
        });

        if (!macValid) {
          e.preventDefault();
          Swal.fire({
            icon: 'error',
            title: 'Adresse MAC invalide',
            text: 'Chaque segment de l’adresse MAC doit être un code hexadécimal à deux caractères.',
            confirmButtonText: 'OK',
          });
          return;
        }
      }

      // Validation du mot de passe
      if (!password || password.length < minLength) {
        e.preventDefault();
        Swal.fire({
          icon: 'error',
          title: 'Mot de passe invalide',
          text: `Le mot de passe doit contenir au moins ${minLength} caractères.`,
          confirmButtonText: 'OK',
        });
      }
    });
  });
</script>


<div class="buttons">
  <div>
    <span onclick="refreshModem()">Actualiser</span>
  </div>
  <div>
    <span onclick="confirmDeleteModem()">Supprimer le modem</span>
    <span onclick="CreateQrCodes()">Generer les Qr Code</span>
  </div>
</div>

<section id="Manage">
  <% if (data && data.length > 0) { %>
    <h2 class="toggle-section">Mes réseaux</h2>
    <div class="section-content">
      <div class="headManage">
        <span>Nom réseau</span>
        <span>Cryptage</span>
        <span>Affichage</span>
        <span>Fréquence</span>
        <span>Mot de passe</span>
      </div>
      <div>
        <ul class="manageData">
          <% data.forEach((network) => { %>
            <% if (network.enableChecked === true) { %>
              <li class="data">
                <span><%= network.essid %></span>
                <span><%= network.encryptionType %></span>
                <span><%= network.essidHideEnabled ? 'Privé' : 'Public' %></span>
                <span><%= network.frequency %></span>
                <span><%= network.password %></span>
              </li>
            <% } %>
          <% }) %>
        </ul>
        
      </div>
    </div>

    <h2 class="toggle-section">Créer un réseau</h2>
    <div class="section-content newnet">
      <form method="post" action="/app/manage/newWifi" id="createNewNetwork">
        <div class="row">
          <div class="input-group input-group-icon">
            <input type="text" placeholder="Nom réseau" name="nomReseau" required />
            <div class="input-icon">
              <i class="fas fa-wifi"></i>
            </div>
          </div>
    
          <div class="input-group">
            <select id="network-visibility-select" name="networkVisibility">
              <option value="" disabled selected>Affichage</option>
              <option value="public">Public</option>
              <option value="private">Privé</option>
            </select>
    
            <select id="network-frequency-select" name="networkFrequency">
              <option value="" disabled selected>Fréquence</option>
              <option value="2.4">2.4GHz</option>
              <option value="5">5GHz</option>
            </select>
    
            <select id="network-security-select" name="networkSecurity" style="display: none;">
              <option value="" disabled selected>Sécurité</option>
              <option value="WPA2-PSK-AES">WPA2-PSK-AES</option>
              <option value="WPA2/WPA3-SAE">WPA2/WPA3-SAE</option>
              <option value="WPA3">WPA3</option>
              <option value="WPA/WPA2-PSK-AES">WPA/WPA2-PSK-AES</option>
              <option value="None">Aucune</option>
            </select>
    
            <select id="network-payment-select" name="networkPayment">
              <option value="" disabled selected>Payement</option>
              <option value="free">Gratuit</option>
              <option value="paid">Payante</option>
            </select>
          </div>
    
          <div class="input-group input-group-icon" id="price-group" style="display: none;">
            <input type="number" id="prix" name="prix" placeholder="Prix (en FCFA)" step="100" min="1000" />
            <div class="input-icon">
              <i class="fa fa-money-bill"></i>
            </div>
          </div>
          <div class="input-group input-group-icon">
            <label for="scannable">Scannable</label>
            <input style="display: block; width: 10%;" type="checkbox" name="scannable" id="scannable" />
          </div>
    
          <div class="input-group input-group-icon" id="mac-address-group" style="display: none;">
            <label for="">Adresse Mac</label>
            <div style="display: flex;align-items: center;">
              <input class="mac" type="text" placeholder="XX" name="macAddress1" maxlength="2" size="2" />:
              <input class="mac" type="text" placeholder="XX" name="macAddress2" maxlength="2" size="2" />:
              <input class="mac" type="text" placeholder="XX" name="macAddress3" maxlength="2" size="2" />:
              <input class="mac" type="text" placeholder="XX" name="macAddress4" maxlength="2" size="2" />:
              <input class="mac" type="text" placeholder="XX" name="macAddress5" maxlength="2" size="2" />:
              <input class="mac" type="text" placeholder="XX" name="macAddress6" maxlength="2" size="2" />
            </div>
          </div>
    
          <div class="input-group input-group-icon">
            <input type="password" placeholder="Mot de passe" name="newpasseword" required />
            <div class="input-icon">
              <i class="fa fa-key"></i>
            </div>
          </div>
        </div>
    
        <div class="row">
          <button class="button" type="submit">Créer</button>
        </div>
      </form>
    
      <script>
        
        // Afficher ou masquer le champ de prix si Payement est Payant
        document.getElementById('network-payment-select').addEventListener('change', function () {
          const priceGroup = document.getElementById('price-group');
          priceGroup.style.display = this.value === 'paid' ? 'block' : 'none';
        });
      </script>
    </div>
    
    

    <h2 class="toggle-section">Supprimer un reseau</h2>
    <div class="section-content newnet">
      <form method="post" class="columnStyle" action="/app/manage/deleteWifi" id="deleteNetwork">
        <select name="networkDelete">
          <option value="" disabled selected>Réseau</option>
          <% 
            data.forEach((network) => { 
              if (network.enableChecked) { 
          %>
                <option value="<%= network.essid %>"><%= network.essid %></option>
          <% 
              }
            }); 
          %>

        </select>
        <button class="button" style="width: 35%;"  type="submit">Supprimer le reseau</button>
      </form>
    </div>

    <h2 class="toggle-section">Modifier mot de passe</h2>
    <div class="section-content newnet">
      <form method="post" action="/app/manage" id="UpdatePassword">
        <select name="network">
          <option value="" disabled selected>Réseau</option>
          <% 
            data.forEach((network) => { 
              if (network.enableChecked) { 
          %>
                <option value="<%= network.essid %>"><%= network.essid %></option>
          <% 
              }
            }); 
          %>
        </select>
        <div class="row">
          <div class="input-group input-group-icon">
            <input type="password" placeholder="Nouveau mot de passe" name="newpassword" />
            <div class="input-icon">
              <i class="fa fa-key"></i>
            </div>
          </div>
        </div>
        <div>
          <button class="button" type="submit">Changer</button>
        </div>
        
      </form>
    </div>
    
  <% } else { %>
    <h1>Aucune donnée</h1>
  <% } %>
</section>


<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="/js/sweetalert.js" defer></script>






